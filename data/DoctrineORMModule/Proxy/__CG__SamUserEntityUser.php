<?php

namespace DoctrineORMModule\Proxy\__CG__\SamUser\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class User extends \SamUser\Entity\User implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'username', 'email', 'displayName', 'password', 'state', 'roles', 'firstname', 'lastname', 'dateofbirth', 'sex', 'file', 'lastLogin', 'lastIp', 'registerTime', 'registerIp', 'userMetas');
        }

        return array('__isInitialized__', 'id', 'username', 'email', 'displayName', 'password', 'state', 'roles', 'firstname', 'lastname', 'dateofbirth', 'sex', 'file', 'lastLogin', 'lastIp', 'registerTime', 'registerIp', 'userMetas');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (User $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($id));

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsername()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsername', array());

        return parent::getUsername();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsername($username)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsername', array($username));

        return parent::setUsername($username);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', array());

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail($email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', array($email));

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getDisplayName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDisplayName', array());

        return parent::getDisplayName();
    }

    /**
     * {@inheritDoc}
     */
    public function setDisplayName($displayName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDisplayName', array($displayName));

        return parent::setDisplayName($displayName);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', array());

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', array($password));

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function getState()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getState', array());

        return parent::getState();
    }

    /**
     * {@inheritDoc}
     */
    public function setState($state)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setState', array($state));

        return parent::setState($state);
    }

    /**
     * {@inheritDoc}
     */
    public function addRoles(\Doctrine\Common\Collections\Collection $roles)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRoles', array($roles));

        return parent::addRoles($roles);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRoles(\Doctrine\Common\Collections\Collection $roles)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRoles', array($roles));

        return parent::removeRoles($roles);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoles', array());

        return parent::getRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function addRole($role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRole', array($role));

        return parent::addRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function hasRole($roleId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasRole', array($roleId));

        return parent::hasRole($roleId);
    }

    /**
     * {@inheritDoc}
     */
    public function getFirstname()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFirstname', array());

        return parent::getFirstname();
    }

    /**
     * {@inheritDoc}
     */
    public function setFirstname($firstname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFirstname', array($firstname));

        return parent::setFirstname($firstname);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastname()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastname', array());

        return parent::getLastname();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastname($lastname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastname', array($lastname));

        return parent::setLastname($lastname);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateofbirth()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateofbirth', array());

        return parent::getDateofbirth();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateofbirth($dateofbirth)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateofbirth', array($dateofbirth));

        return parent::setDateofbirth($dateofbirth);
    }

    /**
     * {@inheritDoc}
     */
    public function getSex()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSex', array());

        return parent::getSex();
    }

    /**
     * {@inheritDoc}
     */
    public function setSex($sex)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSex', array($sex));

        return parent::setSex($sex);
    }

    /**
     * {@inheritDoc}
     */
    public function getFile()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFile', array());

        return parent::getFile();
    }

    /**
     * {@inheritDoc}
     */
    public function setFile($file)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFile', array($file));

        return parent::setFile($file);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastLogin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastLogin', array());

        return parent::getLastLogin();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastLogin($lastLogin)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastLogin', array($lastLogin));

        return parent::setLastLogin($lastLogin);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastIp()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastIp', array());

        return parent::getLastIp();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastIp($lastIp)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastIp', array($lastIp));

        return parent::setLastIp($lastIp);
    }

    /**
     * {@inheritDoc}
     */
    public function getRegisterTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRegisterTime', array());

        return parent::getRegisterTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setRegisterTime($registerTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRegisterTime', array($registerTime));

        return parent::setRegisterTime($registerTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getRegisterIp()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRegisterIp', array());

        return parent::getRegisterIp();
    }

    /**
     * {@inheritDoc}
     */
    public function setRegisterIp($registerIp)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRegisterIp', array($registerIp));

        return parent::setRegisterIp($registerIp);
    }

    /**
     * {@inheritDoc}
     */
    public function addUserMetas(\Doctrine\Common\Collections\Collection $userMetas)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUserMetas', array($userMetas));

        return parent::addUserMetas($userMetas);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUserMetas(\Doctrine\Common\Collections\Collection $userMetas)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUserMetas', array($userMetas));

        return parent::removeUserMetas($userMetas);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUserMeta($userMeta)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUserMeta', array($userMeta));

        return parent::removeUserMeta($userMeta);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserMetas()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserMetas', array());

        return parent::getUserMetas();
    }

    /**
     * {@inheritDoc}
     */
    public function addUserMeta($userMeta)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUserMeta', array($userMeta));

        return parent::addUserMeta($userMeta);
    }

}
